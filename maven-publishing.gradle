apply plugin: 'maven-publish'
apply plugin: 'signing'

group = GROUP
version = Version.name

//java {
//    withJavadocJar()
////    withSourcesJar()
//}

//if (project.hasProperty("android")) { // Android libraries
//    task sourcesJar(type: Jar) {
//        classifier = 'sources'
//        from android.sourceSets.main.java.srcDirs
//    }
//
//    task javadoc(type: Javadoc) {
//        source = android.sourceSets.main.java.srcDirs
//        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    }
//} else { // Java libraries
//    task sourcesJar(type: Jar, dependsOn: classes) {
//        classifier = 'sources'
//        from sourceSets.main.allSource
//    }
//}

//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

//task androidSourcesJar(type: Jar) {
//    archiveClassifier.set('sources')
//    if (project.plugins.findPlugin("com.android.library")) {
//        // For Android libraries
//        from android.sourceSets.main.java.srcDirs
//        from android.sourceSets.main.kotlin.srcDirs
//    } else {
//        // For pure Kotlin libraries, in case you have them
//        from sourceSets.main.java.srcDirs
//        from sourceSets.main.kotlin.srcDirs
//    }
//}

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

//artifacts {
//    archives androidSourcesJar
//}

publishing {
    publications {
        sdkCore(MavenPublication) {
//            artifact sourcesJar
//            artifact javadocJar
            artifact AAR_PATH
//            artifactId POM_NAME
//            version this.version

            groupId group
            artifactId POM_NAME
            version this.version

//            if (project.plugins.findPlugin("com.android.library")) {
//                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
//            } else {
//                artifact("$buildDir/libs/${project.getName()}-${version}.jar")
//            }
            artifact sourcesJar
            artifact javadocJar

//        create<MavenPublication>("mavenJava") {
//            from(components["java"])
            pom {
                name.set(POM_NAME)
                description.set(POM_DESCRIPTION)
                url.set(POM_URL)
                licenses {
                    license {
                        name.set(POM_LICENSE_NAME)
                        url.set(POM_LICENSE_URL)
                    }
                }
                developers {
                    developer {
                        id.set(POM_DEVELOPER_ID)
                        name.set(POM_DEVELOPER_NAME)
                        email.set(POM_DEVELOPER_EMAIL)
                    }
                }
                scm {
                    connection.set(POM_GIT_URL)
                    developerConnection.set(POM_GIT_URL)
                    url.set(POM_URL)
                }
                // This generates POM.xml with proper dependencies.
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.implementation.allDependencies.each {
                        // Ensure dependencies such as fileTree are not included.
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("OSSRH_USER")
                password = System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}

signing {
    sign(publishing.publications)
}

//tasks.javadoc {
//    if (JavaVersion.current().isJava9Compatible) {
//        (options as StandardJavadocDocletOptions).addBooleanOption("html5", true)
//    }
//}

//configure(subprojects) {
//    apply<MavenPublishPlugin>()
//
//    configure<JavaPluginExtension> {
//        withJavadocJar()
//        withSourcesJar()
//    }
//
//
//    configure<PublishingExtension> {
//        publications {
//            val main by creating(MavenPublication::class) {
//                from(components.release)
//
//                pom {
//                    name.set(POM_NAME)
//                    description.set(POM_DESCRIPTION)
//                    url.set(POM_URL)
//                    licenses {
//                        license {
//                            name.set(POM_LICENSE_NAME)
//                            url.set(POM_LICENSE_URL)
//                        }
//                    }
//                    developers {
//                        developer {
//                            id.set(POM_DEVELOPER_ID)
//                            name.set(POM_DEVELOPER_NAME)
//                            email.set(POM_DEVELOPER_EMAIL)
//                        }
//                    }
//                    scm {
//                        connection.set(POM_GIT_URL)
//                        developerConnection.set(POM_GIT_URL)
//                        url.set(POM_URL)
//                    }
//                }
//            }
//        }
//        repositories {
//            maven {
//                name = "OSSRH"
//                setUrl("https://oss.sonatype.org/service/local/staging/deploy/maven2")
//                credentials {
//                    username = System.getenv("OSSRH_USER")
//                    password = System.getenv("OSSRH_PASSWORD")
//                }
//            }
//        }
//    }
//}