/**
 * NOTE: This class is auto generated by the Swagger Gradle Codegen for the following API: Tink API
 *
 * More info on this tool is available on https://github.com/Yelp/swagger-gradle-codegen
 */

package com.tink.rest.apis

import com.tink.rest.models.CallbackRelayedRequest
import com.tink.rest.models.CreateCredentialsRequest
import com.tink.rest.models.Credentials
import com.tink.rest.models.CredentialsListResponse
import com.tink.rest.models.ManualAuthenticationRequest
import com.tink.rest.models.RefreshCredentialsRequest
import com.tink.rest.models.SupplementalInformation
import com.tink.rest.models.UpdateCredentialsRequest
import retrofit2.Response
import retrofit2.http.DELETE
import retrofit2.http.GET
import retrofit2.http.POST
import retrofit2.http.PUT

@JvmSuppressWildcards
interface CredentialsApi {
    /**
     * Create credentials
     * Creates the Credentials for the user. The create request will trigger a refresh towards the provider.
     * @param body The credentials to create. Only providerName and fields are required. (optional)
     * @param items The data types to aggregate from the provider. Multiple items are allowed and are passed as: items&#x3D;item1&amp;items&#x3D;item2. If omitted, all data types are aggregated. (optional)
     */
    @POST("/api/v1/credentials")
    suspend fun create(
        @retrofit2.http.Body body: CreateCredentialsRequest,
        @retrofit2.http.Query("items") items: List<String>?
    ): Credentials

    /**
     * Delete credentials
     * Deletes the given credentials. The deletion is partly done asynchronously.
     * @param id The internal identifier of the credentials to delete (required)
     */
    @DELETE("/api/v1/credentials/{id}")
    suspend fun delete(
        @retrofit2.http.Path("id") id: String
    ): Response<Unit>

    /**
     * Get credentials
     * Gets credentials by ID.
     * @param id The internal identifier of the credentials to get (required)
     */
    @GET("/api/v1/credentials/{id}")
    suspend fun get(
        @retrofit2.http.Path("id") id: String
    ): Credentials

    /**
     * List credentials
     * List all credentials for the user.
     */
    @GET("/api/v1/credentials/list")
    suspend fun getCredentialsList(): CredentialsListResponse

    /**
     * Manual authenticate of credentials
     * Triggers a full authentication flow to renew refresh tokens with ASPSPs. This endpoint is limited to credentials connected to providers of access type `OPEN_BANKING`. This endpoint only triggers authentication, thus a full credentials refresh will not be executed.
     * @param id The internal identifier of the &#x60;Credentials&#x60; object to authenticate. (required)
     * @param body (optional)
     */
    @POST("/api/v1/credentials/{id}/authenticate")
    suspend fun manualAuthentication(
        @retrofit2.http.Path("id") id: String,
        @retrofit2.http.Body body: ManualAuthenticationRequest
    ): Response<Unit>

    /**
     * Get QR code
     * QR code for authentication flows such as Mobile BankID as base64 encoded PNG. Includes `data:image/png;base64,`.
     * @param id (required)
     */
    @GET("/api/v1/credentials/{id}/qr")
    suspend fun qrAsBase64(
        @retrofit2.http.Path("id") id: String
    ): String

    /**
     * Refresh credentials
     * Refreshes the specified credentials. It's only possible to refresh a credential every tenth minute, given that the latest refresh was successful.
     * @param id The internal identifier of the &#x60;Credentials&#x60; object to refresh. (required)
     * @param body (optional)
     * @param items The data types to aggregate from the Provider. Multiple items are allowed. If omitted, all data types are aggregated. (optional)
     * @param optIn Set to true to trigger an opt-in of accounts before doing the refresh. Today only available for enterprise customers. (optional)
     */
    @POST("/api/v1/credentials/{id}/refresh")
    suspend fun refresh(
        @retrofit2.http.Path("id") id: String,
        @retrofit2.http.Body body: RefreshCredentialsRequest,
        @retrofit2.http.Query("items") items: List<String>?,
        @retrofit2.http.Query("optIn") optIn: Boolean?
    ): Response<Unit>

    /**
     * Add Supplemental Information
     * Adds supplemental information to an authentication.
     * @param id (required)
     * @param body The supplemental information. (required)
     */
    @POST("/api/v1/credentials/{id}/supplemental-information")
    suspend fun supplemental(
        @retrofit2.http.Path("id") id: String,
        @retrofit2.http.Body body: SupplementalInformation
    ): Response<Unit>

    /**
     * Third-party callback with redirect
     * Send callback information from an ASPSP. This endpoint will return the registered redirect uri as response.
     * @param body The callback response from the ASPSP with JSON format. (required)
     */
    @POST("/api/v1/credentials/third-party/callback/relayed")
    suspend fun thirdPartyCallbackRelayedPost(
        @retrofit2.http.Body body: CallbackRelayedRequest
    ): Response<Unit>

    /**
     * Modify credentials
     * Modify the specified credentials.
     * @param id The internal identifier of the credentials to change (required)
     * @param body The new credentials object. (required)
     */
    @PUT("/api/v1/credentials/{id}")
    suspend fun update(
        @retrofit2.http.Path("id") id: String,
        @retrofit2.http.Body body: UpdateCredentialsRequest
    ): Credentials

    @POST("/api/v1/credentials/{id}/enable")
    suspend fun enable(
        @retrofit2.http.Path("id") id: String
    ): Response<Unit>

    @POST("/api/v1/credentials/{id}/disable")
    suspend fun disable(
        @retrofit2.http.Path("id") id: String
    ): Response<Unit>
}
