/**
 * NOTE: This class is auto generated by the Swagger Gradle Codegen for the following API: Sample Pet Store App
 *
 * More info on this tool is available on https://github.com/Yelp/swagger-gradle-codegen
 */

package com.tink.service.generated.apis

import com.tink.service.generated.models.ArchiveBudgetResponse
import com.tink.service.generated.models.BudgetDetailsResponse
import com.tink.service.generated.models.BudgetTransactionsResponse
import com.tink.service.generated.models.CreateBudgetResponse
import com.tink.service.generated.models.CreateOneOffBudgetRequest
import com.tink.service.generated.models.CreateRecurringBudgetRequest
import com.tink.service.generated.models.ListBudgetSpecificationsResponse
import com.tink.service.generated.models.ListBudgetSummariesResponse
import com.tink.service.generated.models.UpdateBudgetRequest
import com.tink.service.generated.models.UpdateBudgetResponse
import retrofit2.Response
import retrofit2.http.DELETE
import retrofit2.http.GET
import retrofit2.http.Headers
import retrofit2.http.POST
import retrofit2.http.PUT

@JvmSuppressWildcards
interface BudgetApi {
    /**
     * Archive budget
     * Archives the specified budget.Returns `404 Not Found` if the budget does not exist. Returns `400 Bad Request` if any of the request parameters is incorrect or missing. Returns `500 Internal Server Error` for any unspecified error.
     * The endpoint is owned by defaultname service owner
     * @param id The ID of the budget. (required)
     */
    @Headers(
        "X-Operation-ID: archive"
    )
    @PUT("/api/v1/budgets/{id}/archive")
    suspend fun archive(
        @retrofit2.http.Path("id") id: String
    ): ArchiveBudgetResponse
    /**
     * Create one-off budget
     * Creates a budget for a specific date interval. Returns `400 Bad Request` if any of the request parameters is incorrect or missing. Returns `500 Internal Server Error` for any unspecified error.
     * The endpoint is owned by defaultname service owner
     * @param body The one off budget to be created. (required)
     */
    @Headers(
        "X-Operation-ID: createOneOff",
        "Content-Type: application/json"
    )
    @POST("/api/v1/budgets/one-off")
    suspend fun createOneOff(
        @retrofit2.http.Body body: CreateOneOffBudgetRequest
    ): CreateBudgetResponse
    /**
     * Create recurring budget
     * Creates a recurring budget with a set periodicity.Returns `400 Bad Request` if any of the request parameters is incorrect or missing. Returns `500 Internal Server Error` for any unspecified error.
     * The endpoint is owned by defaultname service owner
     * @param body The recurring budget to be created. (required)
     */
    @Headers(
        "X-Operation-ID: createRecurring",
        "Content-Type: application/json"
    )
    @POST("/api/v1/budgets/recurring")
    suspend fun createRecurring(
        @retrofit2.http.Body body: CreateRecurringBudgetRequest
    ): CreateBudgetResponse
    /**
     * Delete budget
     * Deletes the specified budget. Returns `404 Not Found` if the budget does not exist. Returns `400 Bad Request` if any of the request parameters is incorrect or missing. Returns `500 Internal Server Error` for any unspecified error.
     * The endpoint is owned by defaultname service owner
     * @param id The ID of the budget. (required)
     */
    @Headers(
        "X-Operation-ID: delete"
    )
    @DELETE("/api/v1/budgets/{id}")
    suspend fun delete(
        @retrofit2.http.Path("id") id: String
    ): Response<Unit>
    /**
     * Get budget details
     * Get the specified budget and its periods within the start and end dates. The date parameters are inclusive, thus specifying a date in the middle of a period will include the complete period amounts. Returns `404 Not Found` if the budget does not exist. Returns `400 Bad Request` if any of the request parameters is incorrect or missing. Returns `500 Internal Server Error` for any unspecified error.
     * The endpoint is owned by defaultname service owner
     * @param id The ID of the budget. (required)
     * @param start Date within the first period expressed as UTC epoch timestamp in milliseconds. (optional)
     * @param end Date within the last period expressed as UTC epoch timestamp in milliseconds. (optional)
     */
    @Headers(
        "X-Operation-ID: getDetails"
    )
    @GET("/api/v1/budgets/{id}/details")
    suspend fun getDetails(
        @retrofit2.http.Path("id") id: String,
        @retrofit2.http.Query("start") start: Long?,
        @retrofit2.http.Query("end") end: Long?
    ): BudgetDetailsResponse
    /**
     * Get budget transactions
     * List all transactions for the specified budget within the start and end date. The date parameters are inclusive. Returns `404 Not Found` if the budget does not exist. Returns `400 Bad Request` if any of the request parameters is incorrect or missing. Returns `500 Internal Server Error` for any unspecified error.
     * The endpoint is owned by defaultname service owner
     * @param id The ID of the budget. (required)
     * @param start Query start date expressed as UTC epoch timestamp in milliseconds. (required)
     * @param end Query end date expressed as UTC epoch timestamp in milliseconds. (required)
     */
    @Headers(
        "X-Operation-ID: getTransactions"
    )
    @GET("/api/v1/budgets/{id}/transactions")
    suspend fun getTransactions(
        @retrofit2.http.Path("id") id: String,
        @retrofit2.http.Query("start") start: Long,
        @retrofit2.http.Query("end") end: Long
    ): BudgetTransactionsResponse
    /**
     * List budgets
     * List all budgets for the user. Returns `500 Internal Server Error` for any unspecified error.
     * The endpoint is owned by defaultname service owner
     * @param includeArchived Whether to include archived budgets or not in the response. (optional, default to false)
     */
    @Headers(
        "X-Operation-ID: listSpecifications"
    )
    @GET("/api/v1/budgets")
    suspend fun listSpecifications(
        @retrofit2.http.Query("includeArchived") includeArchived: Boolean?
    ): ListBudgetSpecificationsResponse
    /**
     * List budgets with summaries
     * List all budgets for the user including current period for each budget. Returns `500 Internal Server Error` for any unspecified error.
     * The endpoint is owned by defaultname service owner
     * @param includeArchived Whether to include archived budgets or not in the response. (optional, default to false)
     */
    @Headers(
        "X-Operation-ID: listSummaries"
    )
    @GET("/api/v1/budgets/summaries")
    suspend fun listSummaries(
        @retrofit2.http.Query("includeArchived") includeArchived: Boolean?
    ): ListBudgetSummariesResponse
    /**
     * Update budget
     * Updates the specified budget. Returns `404 Not Found` if the budget does not exist. Returns `400 Bad Request` if any of the request parameters is incorrect or missing. Returns `500 Internal Server Error` for any unspecified error.
     * The endpoint is owned by defaultname service owner
     * @param id The ID of the budget. (required)
     * @param body The modified budget to be applied. (required)
     */
    @Headers(
        "X-Operation-ID: update",
        "Content-Type: application/json"
    )
    @PUT("/api/v1/budgets/{id}")
    suspend fun update(
        @retrofit2.http.Path("id") id: String,
        @retrofit2.http.Body body: UpdateBudgetRequest
    ): UpdateBudgetResponse
}
